import java.util.Random;
import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Michael Delgado
 * Github: github.com/md37971
 * Developed using Apache NetBeans's IDE.
 */

public class DiceRollGUI extends javax.swing.JFrame {
    //Fields
    private int numOfRolls = 0;
    private int dice1RNG = 0;
    private int dice2RNG = 0;
    private int dice3RNG = 0;
    private int diceSumIteration = 0;
    private int totalDiceSum = 0;
    private int iterationCount = 0;
    private int[] rngFrequency = new int[18]; //18 dots, but results 1 and 2 are not possible to roll. (15) 
    private boolean isResetChecked;
    public LoginCheck login = new LoginCheck();
    String imageLocation = "src//imageFiles//";
    String[] diceNames = {imageLocation+"dice1.png",imageLocation+"dice2.png",imageLocation+"dice3.png",imageLocation+"dice4.png",imageLocation+"dice5.png",imageLocation+"dice6.png"};
    
    
    /**
     * Creates new form NewJFrame
     */
    public DiceRollGUI() {
        initComponents();
        setTable();
        setFolders();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        rollButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        saveTableButton = new javax.swing.JCheckBox();
        clearTableButton = new javax.swing.JButton();
        rollsRemainingText = new javax.swing.JLabel();
        stopRollsButton = new javax.swing.JButton();
        fileButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        allResultsTable = new javax.swing.JTable();
        bottomTableButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        deleteRowButton = new javax.swing.JButton();
        clearResultsTableButton = new javax.swing.JButton();
        loginButton = new javax.swing.JButton();
        userNameField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        signOutButton = new javax.swing.JButton();
        signInStatus = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        diceImage2 = new javax.swing.JLabel();
        diceImage3 = new javax.swing.JLabel();
        diceImage1 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DiceRollUI");
        setFocusable(false);
        setResizable(false);

        rollButton.setText("Roll The Dice!");
        rollButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Dice #1");

        jLabel2.setText("Dice #3");

        jLabel3.setText("Dice #2");

        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Roll Sum", "Frequency"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(resultsTable);

        saveTableButton.setText("Reset each roll?");
        saveTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTableButtonActionPerformed(evt);
            }
        });

        clearTableButton.setText("Clear Table");
        clearTableButton.setEnabled(false);
        clearTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTableButtonActionPerformed(evt);
            }
        });

        rollsRemainingText.setText("Rolls Remaining: 0");

        stopRollsButton.setText("Stop Rolls");
        stopRollsButton.setEnabled(false);
        stopRollsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopRollsButtonActionPerformed(evt);
            }
        });

        fileButton.setText("Save Results to File");
        fileButton.setEnabled(false);
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        allResultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        allResultsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(allResultsTable);
        if (allResultsTable.getColumnModel().getColumnCount() > 0) {
            allResultsTable.getColumnModel().getColumn(0).setResizable(false);
            allResultsTable.getColumnModel().getColumn(1).setResizable(false);
            allResultsTable.getColumnModel().getColumn(2).setResizable(false);
            allResultsTable.getColumnModel().getColumn(3).setResizable(false);
            allResultsTable.getColumnModel().getColumn(4).setResizable(false);
            allResultsTable.getColumnModel().getColumn(5).setResizable(false);
            allResultsTable.getColumnModel().getColumn(6).setResizable(false);
            allResultsTable.getColumnModel().getColumn(7).setResizable(false);
            allResultsTable.getColumnModel().getColumn(8).setResizable(false);
            allResultsTable.getColumnModel().getColumn(9).setResizable(false);
            allResultsTable.getColumnModel().getColumn(10).setResizable(false);
            allResultsTable.getColumnModel().getColumn(11).setResizable(false);
            allResultsTable.getColumnModel().getColumn(12).setResizable(false);
            allResultsTable.getColumnModel().getColumn(13).setResizable(false);
            allResultsTable.getColumnModel().getColumn(14).setResizable(false);
            allResultsTable.getColumnModel().getColumn(15).setResizable(false);
        }

        bottomTableButton.setText("Add Results to Data");
        bottomTableButton.setEnabled(false);
        bottomTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottomTableButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Results Table");

        deleteRowButton.setText("Delete Selected Row");
        deleteRowButton.setEnabled(false);
        deleteRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRowButtonActionPerformed(evt);
            }
        });

        clearResultsTableButton.setText("Clear Results Table");
        clearResultsTableButton.setEnabled(false);
        clearResultsTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearResultsTableButtonActionPerformed(evt);
            }
        });

        loginButton.setText("Sign In");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        userNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameFieldActionPerformed(evt);
            }
        });

        jLabel5.setText("Password");

        jLabel6.setText("Username");

        signOutButton.setText("Sign Out");
        signOutButton.setEnabled(false);
        signOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signOutButtonActionPerformed(evt);
            }
        });

        signInStatus.setText("You are currently not signed in.");

        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });

        diceImage2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imageFiles/defaultDice.png"))); // NOI18N

        diceImage3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imageFiles/defaultDice.png"))); // NOI18N

        diceImage1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imageFiles/defaultDice.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 618, Short.MAX_VALUE)
                                .addComponent(signInStatus))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 761, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deleteRowButton)
                            .addComponent(fileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearResultsTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(bottomTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(31, 31, 31))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(96, 96, 96))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(diceImage3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(66, 66, 66)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rollsRemainingText, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(stopRollsButton)))))
                .addGap(18, 18, 18))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(164, 164, 164))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(90, 90, 90)))
                        .addGap(37, 37, 37)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(600, 600, 600))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rollButton, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(clearTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(568, 568, 568))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(diceImage1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(85, 85, 85)
                                .addComponent(diceImage2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(signOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(saveTableButton)
                .addGap(124, 124, 124))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(signOutButton)
                    .addComponent(loginButton)
                    .addComponent(jLabel5)
                    .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(diceImage2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(diceImage3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(diceImage1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bottomTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rollButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(stopRollsButton)
                            .addComponent(rollsRemainingText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveTableButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(signInStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(deleteRowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearResultsTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //USER DEFINED METHODS
    private void setTable() { //Creates table upon launch of program
        DefaultTableModel theTable = (DefaultTableModel)resultsTable.getModel();
        rngFrequency = new int[18];
        System.out.println("Table Set!");
        for(int index = 2; index < resultsTable.getRowCount() + 2; index++) {
            theTable.setValueAt(index + 1, index - 2, 0);
            theTable.setValueAt("-",index - 2,1);
        }
        diceImage1.setIcon(new ImageIcon(imageLocation + "defaultDice.png"));
        diceImage2.setIcon(new ImageIcon(imageLocation + "defaultDice.png"));
        diceImage3.setIcon(new ImageIcon(imageLocation + "defaultDice.png"));
        iterationCount = 0;
    }
    
    private void setFolders() {
        try {
            BufferedReader br = new BufferedReader(new FileReader("src//logininfo//loginCredentials.txt"));
            String line;
            String directory = "src//fileDirectories//";
            while((line = br.readLine()) != null) {
                String[] tokens = line.split(":");
                File newFolder = new File(directory+tokens[0]);
                newFolder.mkdir();
            }
            File newFolder = new File(directory+"GUEST_USER");
            newFolder.mkdir();
        }catch(IOException e1) {
            System.out.println("ERROR: "+e1);
        }
    }
    
    private void resetForLogin() {
        DefaultTableModel theTable = (DefaultTableModel)allResultsTable.getModel();
        setTable();
        clearTableButton.setEnabled(false);
        bottomTableButton.setEnabled(false);
        theTable.setRowCount(0);
        deleteRowButton.setEnabled(false);
        fileButton.setEnabled(false);
        clearResultsTableButton.setEnabled(false);
        this.isResetChecked = false;
        saveTableButton.setSelected(false);
        
        if(!login.isLoggedIn) {
            userNameField.setText("");
            passwordField.setText("");  
        }
    }
    
    private void rollButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollButtonActionPerformed
        // TODO add your handling code here:
       DefaultTableModel theTable = (DefaultTableModel)resultsTable.getModel();
       DefaultTableModel bottomTable = (DefaultTableModel)allResultsTable.getModel();
       //Disables all fields during roll proccess.
       Random rand = new Random();
       rollButton.setEnabled(false);
       clearTableButton.setEnabled(false);
       fileButton.setEnabled(false);
       bottomTableButton.setEnabled(false);
       deleteRowButton.setEnabled(false);
       clearResultsTableButton.setEnabled(false);
       loginButton.setEnabled(false);
       signOutButton.setEnabled(false);
       userNameField.setEnabled(false);
       passwordField.setEnabled(false);
       String userRolls = "";

       try { //Entire process of rolling; user enters number and takes the sum of three dices and indexes the array with the sum to increment one.
            userRolls = JOptionPane.showInputDialog("Enter Number of Rolls (Max 100 rolls at a time): ");
            numOfRolls = Integer.parseInt(userRolls);
            
            if(this.isResetChecked) { //Resets table for each round if "reset each roll" is checked.
                System.out.println("RESET");
                setTable();
            }
       
            if(numOfRolls <= 0 || numOfRolls > 100) {
                throw new NumberFormatException();
            }
            
            stopRollsButton.setEnabled(true);
            Timer timer = new Timer(); //Loop by importing a timer from the Timer and TimerTask class.
            TimerTask task = new TimerTask() {
               @Override
               public void run() {
                    numOfRolls--;
                    rollsRemainingText.setText("Rolls Remaining: " + numOfRolls);
                    dice1RNG = rand.nextInt(1,7);
                    dice2RNG = rand.nextInt(1,7);
                    dice3RNG = rand.nextInt(1,7);
                    diceImage1.setIcon(new ImageIcon(diceNames[dice1RNG - 1]));
                    diceImage2.setIcon(new ImageIcon(diceNames[dice2RNG - 1]));
                    diceImage3.setIcon(new ImageIcon(diceNames[dice3RNG - 1]));
                    diceSumIteration = dice1RNG + dice2RNG + dice3RNG;
                    rngFrequency[diceSumIteration - 1]++;
                    iterationCount++;
                    theTable.setValueAt(rngFrequency[diceSumIteration - 1], diceSumIteration - 3, 1);
                    if(numOfRolls <= 0 || stopRollsButton.isEnabled() == false)  { //Re-enables buttons after each round.
                        boolean bool = false;
                        System.out.println("DONE ROLLING");
                        timer.cancel();
                        rollButton.setEnabled(true);
                        clearTableButton.setEnabled(true);
                        stopRollsButton.setEnabled(false);
                        bottomTableButton.setEnabled(true);

                        if(bottomTable.getRowCount() <= 0) {
                            bool = false;
                        }else {
                            bool = true;
                        }

                        loginButton.setEnabled(!login.isLoggedIn);
                        signOutButton.setEnabled(login.isLoggedIn);
                        rollsRemainingText.setText("Rolls Remaining: 0");
                        deleteRowButton.setEnabled(bool);
                        clearResultsTableButton.setEnabled(bool);
                        fileButton.setEnabled(bool);
                        userNameField.setEnabled(!login.isLoggedIn);
                        passwordField.setEnabled(!login.isLoggedIn);
                        bottomTableButton.setEnabled(true);
                    }
               };
            };
        timer.schedule(task,0,200);
       }catch(NumberFormatException error) { 
          //When there is an error when the user inputs a number.
          boolean bool = false;
          boolean bool2 = false;
          
         if(bottomTable.getRowCount() <= 0) { //Bottom Table Check
              bool = false;
          }else {
              bool = true;
          }
          
          if(iterationCount > 0) { //Roll Table Check
              bool2 = true;
          }else {
              bool2 = false;
          }
           
          if(userRolls != null){JOptionPane.showMessageDialog(rootPane, "The input given is invalid.","Input",2);}
          rollButton.setEnabled(true);
          clearTableButton.setEnabled(bool2);
          bottomTableButton.setEnabled(bool2);
          userNameField.setEnabled(!login.isLoggedIn);
          passwordField.setEnabled(!login.isLoggedIn);
          
          deleteRowButton.setEnabled(bool);
          fileButton.setEnabled(bool);
          clearResultsTableButton.setEnabled(bool);
          loginButton.setEnabled(!login.isLoggedIn);
          signOutButton.setEnabled(login.isLoggedIn);
       }
    }//GEN-LAST:event_rollButtonActionPerformed

    private void saveTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTableButtonActionPerformed
        // TODO add your handling code here:
        //Checkbox to check to reset top table for each round.
        this.isResetChecked = saveTableButton.isSelected();
        System.out.println("PRESSED: "+saveTableButton.isSelected());
    }//GEN-LAST:event_saveTableButtonActionPerformed

    private void clearTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearTableButtonActionPerformed
        // TODO add your handling code here:
        //Resets the table when the reset button is pressed.
        int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to reset the table?", "Clear Table", 2);
        if(option == 0) {
            setTable();
            diceImage1.setIcon(new ImageIcon(imageLocation + "defaultDice.png","0"));
            diceImage2.setIcon(new ImageIcon(imageLocation + "defaultDice.png"));
            diceImage3.setIcon(new ImageIcon(imageLocation + "defaultDice.png"));
            clearTableButton.setEnabled(false);
            bottomTableButton.setEnabled(false);
            JOptionPane.showMessageDialog(rootPane, "Table has been cleared!","Clear Table",1);
        }
    }//GEN-LAST:event_clearTableButtonActionPerformed

    private void stopRollsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopRollsButtonActionPerformed
        // TODO add your handling code here:
        //Disables the stop button after it's pressed.
        stopRollsButton.setEnabled(false);
    }//GEN-LAST:event_stopRollsButtonActionPerformed

    private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
        // TODO add your handling code here:
        
        //Folder Directory
        String folderDirectory = "src//fileDirectories//"+login.getusername()+"//";
        
        //Variables for the header of the txt file.       
        String intro = "TABLE DICE ROLL RESULTS FOR USERNAME: "+ login.getusername();
        String columns = "<3>\t<4>\t<5>\t<6>\t<7>\t<8>\t<9>\t<10>\t<11>\t<12>\t<13>\t<14>\t<15>\t<16>\t<17>\t<18>";
        String csvColumns = "3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18";
        LocalDateTime currentTime = LocalDateTime.now();
        DateTimeFormatter format = DateTimeFormatter.ofPattern("MM-dd-yyyy HH:mm:ss");
        String newDateTime = currentTime.format(format);
        String time = "PROGRAM LAST MODIFIED FILE: " + newDateTime + "";
        //Potential Login System to load results from table and view the file through application?
        
        try { //Iterating through the entire bottom table to store the results to the file.
            if(allResultsTable.getRowCount() > 0) {
                String inputFileName = JOptionPane.showInputDialog(rootPane, "Enter the name of your file. (This will create a .txt and .csv file)", "File Saving", 1);
                
                if(inputFileName == null) {
                    return;
                }else if(inputFileName.equals("")){
                    inputFileName = "file";
                }
                
                BufferedWriter bw = new BufferedWriter(new FileWriter(folderDirectory + inputFileName +".txt"));
                BufferedWriter csvWrite = new BufferedWriter(new FileWriter(folderDirectory + inputFileName + ".csv"));
                System.out.println(intro);
                System.out.println(time);
                System.out.println(columns);

                bw.write(intro+"\n");
                bw.write(time+"\n");
                bw.write(columns+"\n");
                csvWrite.write(csvColumns+"\n");

                for(int index = 0; index < allResultsTable.getRowCount(); index++) {
                   //Write TXT file.
                   String writeString = String.format(" %s\t %s\t %s\t %s\t %s\t %s\t %s\t %s\t %s\t %s\t %s\t %s\t %s\t %s\t %s\t %s\n",
                           allResultsTable.getValueAt(index,0)+"", allResultsTable.getValueAt(index,1)+"", allResultsTable.getValueAt(index,2)+"",
                           allResultsTable.getValueAt(index,3)+"", allResultsTable.getValueAt(index,4)+"", allResultsTable.getValueAt(index,5)+"",
                           allResultsTable.getValueAt(index,6)+"", allResultsTable.getValueAt(index,7)+"", allResultsTable.getValueAt(index,8)+"",
                           allResultsTable.getValueAt(index,9)+"", allResultsTable.getValueAt(index,10)+"",allResultsTable.getValueAt(index,11)+"",
                           allResultsTable.getValueAt(index,12)+"",allResultsTable.getValueAt(index,13)+"",allResultsTable.getValueAt(index,14)+"",
                           allResultsTable.getValueAt(index,15)+"");
                           System.out.println(writeString);
                           bw.write(writeString);
                           
                   //Write CSV file.
                   String writeCSV = String.format("%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\n",allResultsTable.getValueAt(index,0)+"", allResultsTable.getValueAt(index,1)+"", allResultsTable.getValueAt(index,2)+"",
                           allResultsTable.getValueAt(index,3)+"", allResultsTable.getValueAt(index,4)+"", allResultsTable.getValueAt(index,5)+"",
                           allResultsTable.getValueAt(index,6)+"", allResultsTable.getValueAt(index,7)+"", allResultsTable.getValueAt(index,8)+"",
                           allResultsTable.getValueAt(index,9)+"", allResultsTable.getValueAt(index,10)+"",allResultsTable.getValueAt(index,11)+"",
                           allResultsTable.getValueAt(index,12)+"",allResultsTable.getValueAt(index,13)+"",allResultsTable.getValueAt(index,14)+"",
                           allResultsTable.getValueAt(index,15)+"");
                           csvWrite.write(writeCSV);
                }
                System.out.println("File Written!");
                bw.close();
                csvWrite.close();
                JOptionPane.showMessageDialog(rootPane, "File successfully saved!","File Saving",1);      
            }else {
                //Doesn't add anything to file if there is nothing on the table.
                JOptionPane.showMessageDialog(rootPane, "Nothing to save on the table!","Save Table",1);
            }
        }catch(IOException e) {
            System.out.println("ERROR: File Not Found");
        }
    }//GEN-LAST:event_fileButtonActionPerformed

    private void bottomTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottomTableButtonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel bottomTable = (DefaultTableModel)allResultsTable.getModel();
        String[] row = new String[16]; //Array representing a row to add to the bottom table.
        System.out.println("Adding results to table.");
        
        //Transfers values by iterating from the top table to the bottom table, replacing dashes with 0.
        for(int index = 0; index < resultsTable.getRowCount(); index++) {
            if(resultsTable.getValueAt(index, 1).toString().equals("-")) {
                row[index] = "0";
            }else{
                row[index] = resultsTable.getValueAt(index,1)+"";
            }
        }
        
        bottomTable.addRow(row);
        if(resultsTable.getRowCount() > 0) {
            deleteRowButton.setEnabled(true);
            fileButton.setEnabled(true);
            clearResultsTableButton.setEnabled(true);
        }
        setTable();
        bottomTableButton.setEnabled(false);
        clearTableButton.setEnabled(false);
    }//GEN-LAST:event_bottomTableButtonActionPerformed

    private void deleteRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRowButtonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel theTable = (DefaultTableModel)allResultsTable.getModel();
        
        //Deletes a row from the bottom table as long as the row count is greater than zero.
        if(allResultsTable.getRowCount() > 0 && allResultsTable.isRowSelected(allResultsTable.getSelectedRow())) {
            int deleteConfirmation = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to delete this row?","Delete Row",2,1);
           
            if(deleteConfirmation == 0) {
                theTable.removeRow(allResultsTable.getSelectedRow());
                System.out.println("DELETED ROW");
            }
        }else {
            JOptionPane.showMessageDialog(rootPane, "Please select an item to delete!","Delete Row",2);
        }
        
        if(allResultsTable.getRowCount() <= 0) {
            deleteRowButton.setEnabled(false);
            fileButton.setEnabled(false);
            clearResultsTableButton.setEnabled(false);
        }
    }//GEN-LAST:event_deleteRowButtonActionPerformed

    private void clearResultsTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearResultsTableButtonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel theTable = (DefaultTableModel)allResultsTable.getModel();
        int clearOption = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to clear the table?", "Clear Table", 0, 0);
        
        if(clearOption == 0) {
            theTable.setRowCount(0);
            deleteRowButton.setEnabled(false);
            fileButton.setEnabled(false);
            clearResultsTableButton.setEnabled(false);
            JOptionPane.showMessageDialog(rootPane, "Results table has been cleared!","Clear Table",1);
        }
    }//GEN-LAST:event_clearResultsTableButtonActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        // TODO add your handling code here:
        login = new LoginCheck(userNameField.getText().trim(),passwordField.getText());
        System.out.println("=================");
        if(login.isLoggedIn) {
            System.out.println("WELCOME: " + login.getusername());
            signOutButton.setEnabled(true);
            loginButton.setEnabled(false);
            userNameField.setEnabled(false);
            passwordField.setEnabled(false);
            resetForLogin();
            signInStatus.setText("Signed in as: " + login.getusername());
            JOptionPane.showMessageDialog(rootPane, "Successful Sign in!","Sign-In",1);
        }else {
            System.out.println("Invalid Login");
            JOptionPane.showMessageDialog(rootPane, "Invalid Sign-in, please check your credentials correctly.","Sign-In",2);
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    private void userNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userNameFieldActionPerformed

    private void signOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signOutButtonActionPerformed
        // TODO add your handling code here:
        login = new LoginCheck();
        signOutButton.setEnabled(false);
        loginButton.setEnabled(true);
        signInStatus.setText("You are currently not signed in.");
        userNameField.setEnabled(true);
        passwordField.setEnabled(true);
        resetForLogin();
        System.out.println("Signed Out");
        JOptionPane.showMessageDialog(rootPane, "You have signed out.","Sign-In",2);
    }//GEN-LAST:event_signOutButtonActionPerformed

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DiceRollGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DiceRollGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DiceRollGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DiceRollGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DiceRollGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable allResultsTable;
    private javax.swing.JButton bottomTableButton;
    private javax.swing.JButton clearResultsTableButton;
    private javax.swing.JButton clearTableButton;
    private javax.swing.JButton deleteRowButton;
    private javax.swing.JLabel diceImage1;
    private javax.swing.JLabel diceImage2;
    private javax.swing.JLabel diceImage3;
    private javax.swing.JButton fileButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton loginButton;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTable resultsTable;
    private javax.swing.JButton rollButton;
    private javax.swing.JLabel rollsRemainingText;
    private javax.swing.JCheckBox saveTableButton;
    private javax.swing.JLabel signInStatus;
    private javax.swing.JButton signOutButton;
    private javax.swing.JButton stopRollsButton;
    private javax.swing.JTextField userNameField;
    // End of variables declaration//GEN-END:variables
}